setwd("~/Coursera/Data Scientist/ProgrammingAssignment2/ProgrammingAssignment2")
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
cachemean <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
}
matrix(4,3,3,2,nrow=2,ncol=2)
matrix(c(4,3,3,2),nrow=2,ncol=2)
makeCacheMatrix( matrix(c(4,3,3,2),nrow=2,ncol=2))
test <- makeCacheMatrix( matrix(c(4,3,3,2),nrow=2,ncol=2))
test$get
output <- test$get
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
cacheinverse <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
cacheinverse <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
}
test <- makeCacheMatrix( matrix(c(4,3,3,2),nrow=2,ncol=2))
testget <- test$get()
View(testget)
View(testget)
test.solved <- cacheSolve(test)
test.solved
test.inverse <- test.solved$getinverse()
test <- makeCacheMatrix(c(4,3,3,2),nrows=2,ncol=2)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
cacheinverse <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data)
x$setinverse(i)
i
}
}
test <- makeCacheMatrix(c(4,3,3,2),nrows=2,ncol=2)
test <- makeCacheMatrix(matrix(c(4,3,3,2),nrows=2,ncol=2))
cacheSolve(test)
solved <- cacheSove(test)
solved <- cacheSolve(test)
solved$get()
solve$getinverse()
test$get()
test <- mackeCacheMatarix(matrix(c(4,3,3,2),nrow=2,ncol=2))
test <- makeCacheMatarix(matrix(c(4,3,3,2),nrow=2,ncol=2))
test <- makeCacheMatrix(matrix(c(4,3,3,2),nrow=2,ncol=2))
test$get()
test$getinverse()
cacheSolve(test)
test$getinverse()
cacheSolve(test$set())
result <- cacheSolve(test)
result
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
cacheinverse <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data)
x$setinverse(i)
return(i)
}
}
result <- cacheSolve(test)
result
result <- cacheSolve(test$get())
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
cacheinverse <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data)
x$setinverse(i)
return(i)
}
}
test <- makeCacheMatrix(matrix(c(4,3,3,2),nrow=2,ncol=2))
test$get()
cacheSolve(test$get())
result <- cacheSolve(test$get())
test$getinverse()
result <- cacheSolve(test)
solve(matrix(c(4,3,3,2),nrow=2,ncol=2))
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
testv <- makeVecor(c(1,2,3,4))
testv <- makeVector(c(1,2,3,4))
testv$get()
testv$getmean()
cachemean(testv)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
cacheinverse <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data,...)
x$setinverse(i)
return(i)
}
}
testm <- makeCacheMatrix(matrix(c(4,3,3,2),nrow=2,ncol=2))
cacheSolve(testm)
cacmean(testv)
cachemean(testv)
testv$getmean
testv$getmean()
testi <- test$getinverse()
testi
testdata <- test$get()
testdata
testi <- solve(testdata)
testi
test$setinverse(testi)
test$getinverse()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
cacheinverse <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data,...)
x$setinverse(i)
i
}
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
cacheinverse <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data,...)
x$setinverse(i)
i
}
}
makeCacheMatrix(matrix(c(4,3,3,2),nrow=2,ncol=2))
test <-makeCacheMatrix(matrix(c(4,3,3,2),nrow=2,ncol=2))
test.solve <- cacheSolve(test)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
testv <- makeVector(c(1,2,3,4))
testv.solve <- cachemean(testv)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data,...)
x$setinverse(i)
i
}
cacheSolve(test)
test.solve <- cacheSolve(test)
test.solve
